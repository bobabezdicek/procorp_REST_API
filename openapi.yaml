openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: A REST API for user management (Laravel + token-based authentication)
servers:
  - url: http://localhost:8001/api
    description: Local development server

paths:
  /login:
    post:
      tags:
        - Auth
      summary: User login
      description: Verifies the email and password and returns an API token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data (e.g., missing email or password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Invalidates the API token of the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get a list of users
      description:
        - An admin sees all users, a regular user sees only themselves.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Only an admin can create new users.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Only admin can create new users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data (e.g., invalid email format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user details
      description:
        - Admin can view any user, a regular user can only view their own record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: User detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden (attempt to view someone else's details)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update user
      description:
        - Admin can update any user, a regular user can only update their own account.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden (attempt to update someone else's account)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data for update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Delete user
      description:
        - Admin can delete any user, a regular user can only delete their own account.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to be deleted
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '403':
          description: Forbidden (attempt to delete someone else's account)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [admin, user]
          example: "admin"
        created_at:
          type: string
          format: date-time
          example: "2023-05-01T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-05-02T08:10:05Z"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          format: password
          example: "secret123"

    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          example: "abcdefgh123456..."
        user:
          $ref: '#/components/schemas/User'

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Logout successful"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid credentials"
        errors:
          type: object
          nullable: true
          description: "Detailed validation errors"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Alice"
        email:
          type: string
          format: email
          example: "alice@example.com"
        password:
          type: string
          format: password
          description: "The user's password (will be hashed)"
          example: "secret123"
        role:
          type: string
          enum: [admin, user]
          example: "user"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "New Name"
        email:
          type: string
          format: email
          example: "new@example.com"
        password:
          type: string
          format: password
          description: "New password (if changing)"
          example: "secret456"
        role:
          type: string
          enum: [admin, user]
          example: "admin"

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "User deleted successfully"
